




Let us formalize the classification problem.
The combinatorial objects that we want to classify form a set $X$. 
The isomorphisms that we allow between these objects arise from 
a group $G$ acting on $X$.
We say that a group $G$ acts on a set $X$ if 
for each $x\in X$ and each $g \in G$, 
there is a unique image $x^g \in X.$ 
This mapping 
$$
X \times G \rightarrow G, (x,g) \mapsto x^g 
$$
satisfies the two properties
\begin{enumerate}
\item
$x^{\id} = x$ for all $x \in X$
where $\id$ is the identity element of $G$, and
\item
$(x^g)^h = x^{gh}$ for all $x \in X$ and all $g,h \in G.$
\end{enumerate}
The {\em orbit} (or $G$-orbit) 
of an element $x \in X$ under $G$ is the set 
$$
x^G := \{ x^g \mid g \in G \}.
$$
The stabilizer of an element $x \in X$ is the subgroup
$$
G_x := \{ g \in G \mid x^g = x \}.
$$

For two elements $x,y \in X,$ 
the orbits $x^G$ and $y^G$ are either the same or disjoint. 
Hence, the set of orbits partitions $X$. 
This is called the {\em orbit decomposition} of $X$ under $G.$ 

A {\em transversal} for the $G$-orbits on $X$ 
is a set $T \subseteq X$ with the following two properties:
\begin{enumerate}
\item
$t_1^G \neq t_2^G $ for all $t_1 \neq t_2,$ $t_1,t_2 \in T,$ and
\item
for each $x \in X$, there exists an element $t \in T$ such that 
$
x \in t^G.$
\end{enumerate}
Because of the first property, the element $t \in T$ in 2) is unique.

\bigskip

We say that we have {\em classified} the orbits of $G$ on $X$ 
if we have determined a transversal 
for the $G$-orbits on $X$.





Why was Orbiter designed as a library of C++ classes? 
Programming in C++ certainly requires some expertise. 
The initial investment to get a program running is higher 
than in a command line driven system. 
On the other hand, efficiency is often better in C++, since
we have immediate control of the low-level data structures.
Another benefit of C++ software is that it is portable. 
It can be compiled 
and installed on almost any system without licensing costs. 
Also, a C++ class library can be tied to other software at a low level.
This is the most efficient way to tie software packages together.






\bigskip



\verb'orbiter' we try to collect general purpose code for dealing with combinatorial objects in a library 
which makes these functions reusable for many different applications.
The top level program 
(henceforth called the application) should be as short a possible, since this is what is written and 
maintained by the user of orbiter. 
The specifics of describing the kind of objects considered should be coded in the application.
The general algorithms for classifying the objects of this kind reside in the orbiter library. 
While this sounds simple, there is a surprising difficulty in the design of C++ which makes 
providing algorithms which work for different combinatorial objects difficult.

\bigskip


Classes in the library 
do not know about classes that are defined in the application itself.
This is unavoidable since the number of possible combinatorial objects that one could consider is theoretically unlimited.
Suppose we want to compute the orbits of a group on a certain set things.
These things are all instances of a certain type of combinatorial objects. 
The orbit algorithm cannot possibly know the type of combinatorial object 
since this will only later be defined in the application 
(which may not be part of the orbiter library). 
The traditional inheritage model cannot be used since it requires the class implementing the orbit algorithm to know the 
class of the combinatorial object (which it cannot).
The only way to implement this in C++ is by means of virtual functions, which are functions that are known to a class but which are not implemented until 
a derived class is implemented. However, as it turns out, the mechanism of virtual functions is relatively slow in C++. 
We decided to use the more basic approach of passing of functions pointers, which is an idea going back to the C language itself. 
Basically, we agree on a certain set of functions which are supposed to be implemented, 
and we will provide these functions at a later point. Typically, the functions that we need will be implemented in the 
application.  


\bigskip
Let us come back once more to the issue that classes in the library do not know 
about classes in the application program. One way that this can be handled is 
through function pointer. The library classes call a function through a function pointer 
that has been stored previously. This function is known as a {\em callback function.}
In order to access a member function from the 
class in the application (which cannot be accessed from the library, since the 
library does not know about the application class), one can use the following trick:
The callback function receives an additional pointer of type \verb'void *' 
which is the object of the class defined in the application. The library 
treats this pointer as a void pointer. The callback function 
casts this pointer to the type that it should be and then calls the 
member function that is supposed to perform the real work. 


The nature of the objects is immaterial for the group action. 
The specific nature of the object is needed for computing the mapping associated to a group element, however. 
Suppose we could represent the objects as integers, 
and in turn convert these integers back into the associated combinatorial object (rank and unrank).
Then the group action would assign to each group element a permutation of the sets of integers that represent the objects in the set. 
For convenience, we may assume that the integers that are valid representatives for combinatorial objects 
are the numbers from $0$ to $N-1$, where $N$ is the number of objects. 
Then each group element gives rise to a mapping 
which would be a permutation of the numbers $\{0,\ldots,N-1\}$. 
The permutation need not be stored. Whenever we need to look up an image of an integer $i$ 
under the permutation $\pi$ associated to the group element $g$, 
we could so the following: We unrank the object associated to the integer $i$, 
we map the object under the group element $g$, then we rank the resulting object, and this integer is the image of $i$ under $\pi.$
With this scheme, the orbit algorithm would work with the integers from $0$ to $N-1$, and it would rank and unrank 
objects using callback functions provided by the application.
This way, an algorithm for computing orbits 
can be implemented in a way which does not depend on a specific group.  
 
\bigskip



When working with groups, \verb'orbiter' provides an interface to 
handle group operations like multiplication or inversion of group elements. 
It also provides access to the group action. 
This is the basic idea behind the libraries \verb'ACTION' and \verb'SNAKES_AND_LADDERS'.
An interface for permutation group algorithms is provided in \verb'ACTION', 
and an algorithm to compute orbits working with permutation groups 
through this interface is provided in \verb'SNAKES_AND_LADDERS'.
This way, applications that classify graphs, codes, designs, or geometries can be written 
that all use the same algorithm to classify orbits. 
The applications differ only in the group that they set up and possibly in the 
conditions on the subsets that define the combinatorial object.
We will see a few examples for this model in the subsequent parts of this document.



\begin{quote}
\verb'ORBITER/'\\
\verb'ORBITER/DATA'\\
\verb'ORBITER/DATA/BLT'\\
\verb'ORBITER/DATA/BLT/23'\\
\verb'ORBITER/DATA/GRAPH_AND_TOURNAMENT'\\
\verb'ORBITER/DATA/HYPEROVAL'\\
\verb'ORBITER/SRC'\\
\verb'ORBITER/SRC/BLT'\\
\verb'ORBITER/SRC/GRAPH'\\
\verb'ORBITER/SRC/HYPEROVAL'\\
\verb'ORBITER/SRC/LIB'\\
\verb'ORBITER/SRC/LIB/ACTION'\\
\verb'ORBITER/SRC/LIB/DISCRETA'\\
\verb'ORBITER/SRC/LIB/GALOIS'\\
\verb'ORBITER/SRC/LIB/INCIDENCE'\\
\verb'ORBITER/SRC/LIB/SNAKES_AND_LADDERS'\\
\verb'ORBITER/SRC/LIB/TOP_LEVEL'\\
\verb'ORBITER/SRC/LIB/WINDOWS'\\
\verb'ORBITER/SRC/LIB/WINDOWS/SAVE'\\
\end{quote} 


The naive approach would be to compute the orbits of $G$ on flags of ${\mathcal R}$ and 
to associate one edge with each orbit.
However, in most interesting applications, 
the relation ${\mathcal R}$ is prohibitively large, 
even though the number of flag orbits 
may be reasonably small. 
Therefore, the naive appoach 
is bound to fail in those cases. 

There are two algorithms in use.
We wish to describe and compare both algorithms. 

\bigskip

The first algorithm requires us to find a vertex-colored graph $\Delta$ 
such that the group 
$G$ coincides with the automorphism group of this graph. 
The elements of $\cP$ are mapped to graphs obtained from $\Delta$ 
by adding one additional color. 
 



uses depth first search to examine the poset of $G$-orbits on $\cP.$ 
This algorithm requires the presence of a canonical form mapping. 




Let us talk about some of the design choices behind orbiter.
The class library provides algorithms for basic algebraic and combinatoric objects 
such as finite fields, projective spaces 
over finite fields, groups etc.
Creating an object like a finite desarguesian projective plane 
as well as its automorphism group 
is done in a few lines of code, for instance.
Other objects from finite geometry like orthogonal 
and hermitian polar spaces are available
also. 

\bigskip

How does one work with \verb'orbiter'? Since \verb'orbiter' is a library of C++ classes and functions, 
one has to create an application / program in order to use its functionality. 
Almost immediately, the program will include orbiter's declaration file orbiter.h and then start doing things. 



\bigskip

