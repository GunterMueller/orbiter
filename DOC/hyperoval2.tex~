\section{Classifying Hyperovals By Breaking The Symmetry}


Let us look at 
the case of hyperovals in $\PG(2,32).$ It is known that there are exactly six 
hyperovals. 
To classify the hyperovals in $\PG(2,32)$, we cannot proceed as before. 
The reason is that there are too many arcs of size $9$ or more 
that need to be considered. This makes the previous algorithm very slow 
and most likely fail because of memory issues. 
Instead, we use a more powerful algorithm. 


\bigskip


The algorithm that we use to classify hyperovals in harder cases 
is known as ``breaking the symmetry''. 
This algorithm proceeds in three stages.

\bigskip

In stage one, we 
classify arcs of size $s$ first, 
for some relatively small vaue of $s$. 
This is done using the algorithm that we used 
before to classify orbits of arcs.

\bigskip


Once we have the classification of arcs of size $s$, we consider each arc 
in turn and extend that arc to a hyperoval in all possible ways. 
This is stage two, and it is called the lifting.
Since hyperovals have size $q+2$ (in this case), 
the lifting of a particular $s$-set amounts to choosing $q+2-s$ additional points satisfying all the requirements. 
This process can be formulated as an exact cover problem. 
This is a problem that has been studied by Computer Scientists for some time.
Fast algorithms for solving instances of this problem are available, 
for instance Knuth's algorithm {\em dancing links.}

\bigskip

Let us look in more detail at how this exact cover problem is formulated.
First of all, the points that have been chosen already determine 
${s \choose 2}$ secants and 
$s (q+1-(s-1))$ tangents. 
None of the points lying on a secant 
can be chosen, since we do not allow three points on a line.
We say that a point is valid if it is not on 
any of the secants though any two of the $s$ chosen points (if $s=1$, we simply require that 
the point be different from the chosen point).
In order to turn the tangents into secants, 
exactly one valid point has to be chosen on each tangent. This is the lifting.
Observe that some of the previously external lines may end up 
containing points from the lifting. We will take care of this later.
To perform the lifting, 
we consider the set of tangent lines  and the set of points that 
are valid. We form the incidence matrix whose rows are the 
tangent lines and whose columns are the valid points. 
A matrix entry in a certain row and column 
is one if the valid point associated to 
that column lies on the tangent line associated to that row. 
All other entries are zero. 
The exact cover problem is equivalent to finding $q+2-s$ 
columns of this incidence matrix so that the column vectors add up  (over the integers) 
to the all-one vector. This kind of problem can be solved using 
the above-mentioned algorithm ``dancing links''.
The only issue with this approach is that we do not control 
the external lines. Some of them may end up with more than two points 
on it. These fake liftings do not correspond to hyperovals and 
need to be eliminated. As it turns out, the numer of fake liftings 
is not that large, so we can eliminate them after the exact cover 
algorithm has completed.


\bigskip


Once we have all hyperovals that arise by extending arcs of size $s$, 
we perform another round of isomorphism classification. This is step three 
of the algorithm. Let us not go into the details of this step right now.



\bigskip




The classification of hyperovals in $\PG(2,32)$ is a case that 
is well-suited to breaking the symmetry.
The command 
\begin{quote}
\verb'make 32' \\
\end{quote}
which is equivalent to 
\begin{quote}
\verb'ORBITER/SRC/APPS/HYPEROVAL/hyperoval.out -v 4 -q 32 -target_size 34'\\
\verb'    -compute_starter 7 CLASSIFY_32/ -W' \\
\end{quote}
classifies the arcs of size $7$ in $\PG(2,32).$ 
Once this is done, we issue the command 
\begin{quote}
\verb'make lift' \\
\end{quote}
which is defined as 
\begin{quote}
\verb'ORBITER/SRC/APPS/HYPEROVAL/hyperoval.out -v 6 -q 32 -target_size 34'\\
\verb'    -lift 7 CLASSIFY_32/ -lex -solve'
\end{quote}
to compute all liftings, i.e. all hyperovals containing one of the 
representatives of an isomorphism class of arc of size $7$. 
Then we issue four more commands:
\begin{quote}
\verb'make 32_read_solutions' \\
\verb'make 32_compute_orbits' \\
\verb'make 32_classify' \\
\verb'make 32_report' \\
\end{quote}
The first command reads the liftings. The second command processes 
the liftings and computes the orbits under the stabilizer of the 
arc from which the lifting originated. 
The third command performs the classification and the fourth command 
produces a report that is a tex file.
These commands may take a little while. For instance, 
the command \verb'make 32_classify' takes a little over an hour on a laptop. 
The total sequence should be done in less than 2 hours.
The last command produces the file \verb'hyperovals_32.tex' 
inside \verb'ORBITER/DATA/HYPEROVAL'.
This file can be processed using \verb'pdflatex hyperovals_32.tex'.
The resulting file \verb'hyperovals_32.pdf' contains the 
classification of hyperovals in $\PG(2,32)$ in a human-readable form. The file is available 
from the \verb'orbiter' web-site listed above.


\bigskip

Let us look at the specifics of how the lifting is done. Inside 
\verb'arc_generator', there is a function 
\begin{quote}
\verb'void arc_generator::compute_lifts(const BYTE *prefix, INT starter_size, '\\
\verb'    INT f_lex, INT f_split, INT split_r, INT split_m, '\\
\verb'    INT f_solve, INT f_read_instead, '\\
\verb'    INT verbose_level)'\\
\end{quote}
This function performs the lifting.
The arguments are as follows: \verb'prefix' is a string that is used 
to locate the files from Step 1. \verb'starter_size' is the size of the 
starters that should be used. The classification of starters of that size must have been done in Step 1 (but it would be OK if we had 
classified larger size sets in Step 1, except that we would not 
use this knowledge). 
The option \verb'f_lex' determines if we apply the lexicographic ordering to reduce the set of liftings. The options 
\verb'f_split', \verb'split_r' and \verb'split_m' have to do with 
parallel computing. They allow that only a slice of the lifting problem 
is done. Namely, if \verb'f_split' is \verb'TRUE' then only starter  
whose number $i$ is congruent to \verb'split_r' modulo \verb'split_m' 
are listed.
The option \verb'f_solve' determines whether the 
lifts should be computed. If \verb'FALSE', the system of 
equations is prepared but not solved. 
The option \verb'f_read_instead' is useful if the systems 
have been handed over to an external solver, 
and the solutions from the external solver should be read from file. 
The final option \verb'verbose_level' determines how 
much text output should be produced.

\bigskip

Let us look inside the function \verb'arc_generator::compute_lifts'.
We find the data structure
\begin{quote}
\verb'exact_cover *E;'
\end{quote}
that manages the exact cover problem. 
The object of type \verb'exact_cover' is initialized using 
the commands
\begin{quote}
\verb'E->init(this /* user_data */, '\\
\verb'    A, A, '\\
\verb'    nb_points_total, target_size, block_size, starter_size, '\\
\verb'    prefix, base_fname, '\\
\verb'    f_lex, f_split, split_r, split_m, '\\
\verb'    arc_generator_lifting_prepare_function,'\\
\verb'    arc_generator_lifting_cleanup_function,'\\
\verb'    arc_generator_early_test_function, '\\
\verb'    this,'\\
\verb'    verbose_level - 1);'\\
\verb'E->add_solution_test_function('\\
\verb'    callback_arc_test, '\\
\verb'    (void *) this,'\\
\verb'    verbose_level - 1);'\\
\end{quote}
The \verb'init' function sets up the \verb'exact_cover' object. 
The \verb'add_solution_test_function' function is optional, and can be used 
if an additional test should be performed on the solutions of the exact cover problem. 
We will talk about this in a little while. Let us look at the \verb'init' function first. 
The arguments \verb'nb_points_total', 
\verb'target_size', 
\verb'block_size' and 
\verb'starter_size' specify the parameters of the 
exact cover problem: \verb'nb_points_total' is set to $q^2+q+1$  
(in \verb'arc_generator::init') and gives the number of points (or lines) in the projective plane, \verb'target_size' 
specifies the size of the object that we wish to create (here, a hyperoval has $q+2$ points), \verb'block_size' is the number of 
lines trhough a point and also the number of points on a line. 
Finally, \verb'starter_size' is the size of the starter sets.
The \verb'exact_cover' object cannot initialize itself, since it does 
not know what problem we are going to solve (\verb'exact_cover' is 
a class in the \verb'orbiter' class library and as such does not 
know what exact cover problem it is about to be used for). 
For this reason, we pass function pointers 
\begin{quote}
\verb'arc_generator_lifting_prepare_function', \\
\verb'arc_generator_lifting_cleanup_function' \\
\verb'arc_generator_early_test_function', and\\
\end{quote}
as well 
as a data pointer \verb'this', representing the 
\verb'arc_generator' object itself. 
These function pointers are used to maintain the instance of the 
exact cover problem:
\begin{quote}
\verb'arc_generator_lifting_prepare_function'
\end{quote}
sets up the instance of the 
exact cover problem that is associated to 
one particular starter set. 
It does so by computing several arrays and matrices that encode the exact cover problem.
This function is invoked once the starter set 
has been read from file, which is at the beginning of the exact cover 
solver.
\begin{quote}
\verb'arc_generator_lifting_cleanup_function' 
\end{quote}
frees up any data pointers that have been allocated by the previous function, and 
is invoked once the exact cover problem has been solved, which is at the end of the exact cover solver.
The function 
\begin{quote}
\verb'arc_generator_early_test_function' 
\end{quote}
is needed 
to that we can test if a certain point can possibly be added to a 
set of points previously chosen. It is the same test function 
that is used by \verb'blt.out' when it classifies arcs. 
It simply tests if a given point is compatible with a previously chosen set. 

\bigskip

The job of the \verb'exact_cover' object is to run over all starter, 
load a particular starter 
from file, load a set of points called the live points that go along with it, 
and handle the exact cover problem though the callback functions described above. 
Once the exact cover problem is defined, it will proceed in one of several ways. 
If the flag \verb'f_solve' is \verb'TRUE', an object of type 
\verb'exact_cover_solver' is created and the DLX algorithm (dancing links) 
is invoked to solve the problem. If the flag \verb'f_read_instead' is \verb'TRUE' 
then the solutions are read from a file. This is useful if an external solver 
is used.

\bigskip

The final command \verb'add_solution_test_function' in the sequence of commands that 
set up the \verb'exact_cover' object \verb'E' (see above)
installs yet another function pointer. 
The purpose if this function is to do an extra test on the solutions of the exact cover problem. 
As we pointed out previously, the exact cover problem does not completely 
capture the condition that no three points are collinear. There may be lines that are 
external to the starter set that end up with more than two points from the exact cover 
solver. These fake solutions need to be removed. This is exactly the purpose of the function 
\verb'callback_arc_test'.

