\section{Installation}



Orbiter is a program package written in C++ to classify discrete structures.
It is available from the web-site
$$
\mbox{http://www.math.colostate.edu/$\sim$betten/orbiter.html}
$$
The package is distributed in a file called \verb'orbiter_yymmdd.tar.gz' (where yy stands for the year, mm for the month and dd for the day of the release).
After unpacking, the following directory structure is established:

{\tt
\input CODE/list_of_directories.tex
}

To compile, execute
\begin{quote}
\verb'cd ORBITER'\\
\verb'cd SRC'\\
\verb'make'\\
\verb'cd ../..' \\
\end{quote}
The core of the system is a library of C++ classes that is contained in 
\verb'ORBITER/SRC/LIB'.
Several application programs are part of \verb'orbiter'. 
They are stored in subdirectories of \verb'ORBITER/SRC/APPS' such as 
\begin{quote}
\verb'ORBITER/SRC/APPS/BLT'\\
\verb'ORBITER/SRC/APPS/GRAPH'\\
\verb'ORBITER/SRC/APPS/HYPEROVAL'\\
\verb'ORBITER/SRC/APPS/TOOLS'\\
\verb'ORBITER/SRC/APPS/TRANSLATION_PLANE'\\
\end{quote}
The library itself comes in six pieces, forming a hierarchy of layers.
The bottom layer is GALOIS. On top of this is ACTION. On top of this is SNAKES\_AND\_LADDERS. 
On top of this is INCIDENCE. 
On top of this is DISCRETA.
Finally, the highest layer is TOP\_LEVEL.
Thus, the layers listed in increasing order are:
\begin{quote}
\verb'ORBITER/SRC/LIB/GALOIS'\\
\verb'ORBITER/SRC/LIB/ACTION'\\
\verb'ORBITER/SRC/LIB/SNAKES_AND_LADDERS'\\
\verb'ORBITER/SRC/LIB/INCIDENCE'\\
\verb'ORBITER/SRC/LIB/DISCRETA'\\
\verb'ORBITER/SRC/LIB/TOP_LEVEL'\\
\end{quote}
Each library comes with its own declaration file (\verb'.h' file). The declaration files are 
\begin{quote}
\verb'ORBITER/SRC/LIB/GALOIS/galois.h'\\
\verb'ORBITER/SRC/LIB/ACTION/action.h'\\
\verb'ORBITER/SRC/LIB/SNAKES_AND_LADDERS/snakesandladders.h'\\
\verb'ORBITER/SRC/LIB/INCIDENCE/incidence.h'\\
\verb'ORBITER/SRC/LIB/DISCRETA/discreta.h'\\
\verb'ORBITER/SRC/LIB/TOP_LEVEL/top_level.h'\\
\end{quote}
It suffices to include the file
\begin{quote}
\verb'ORBITER/SRC/LIB/orbiter.h'
\end{quote}
which will include all six include files previously mentioned in the appropriate order.
By using makefiles to set compiler options that list the search path, 
the include command in an application would simply be 
\begin{quote}
\verb'#include "orbiter.h"'
\end{quote}


\bigskip



\bigskip




%Next, we will describe various applications of \verb'orbiter'. 


%Most 
%of these applications require us to compute the orbits of a group 
%on subsets or on subspaces. Let us make this precise. Given a group $G$ 
%acting on a half-lattice $\frakL$. The elements of $\frakL$ could be subsets 
%of a finite set $X$ or subspaces 
%of a finite-dimensional vector space $V$ defined over a finite field $\bbF_q$. 
%Classifying the orbits of $G$ 
%on $\frakL$ means listing orbit representatives together with their stabilizers. 
%Also, given an element $x \in \frakL$, we wish to be able to compute a group element 
%$g_x$ such that $g_x(x)$ is one of the representatives chosen.
%The lattices of subsets and subspaces come with a natural level function.
%The level of a set is its size, while the level of a subspace is its dimension.
%Let $\frakL_i$ be the level $i$ in $\frakL$, i.e. 
%$$
%\frakL_i = \{ x \in \frakL \mid \mbox{level}(x) = i \}.
%$$
%The classification algorithm in \verb'orbiter' proceeds by classifying 
%the orbits on $\frakL_i$ for $i=0,1,2,\ldots.$



%The first application 
%is a research problem about sets in projective space. The second application is 
%more or less a ``toy'' application, 
%meant only to demonstrate the approach that 
%\verb'orbiter' takes. We will talk about the classification of graphs and 
%tournaments. Of course, there are special programs for the classification 
%of graphs and tournaments that are highly optimized, and these programs perform 
%much faster. The point in talking about graphs is to demonstrate the 
%computational model that is used by \verb'orbiter', which is based on 
%the theory of permutation groups. It is much easier to explain this model 
%if we are talking about a problem that is familiar to most people in Computer Science, %such as the problem of classifying graphs. This is why we call this 
%a ``toy'' application.








