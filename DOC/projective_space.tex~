\subsection{Projective Space}


Suppose we want to work in $n$-dimensional projective space over a finite field. We can use the 
\verb'finite_field' object from before to provide the points in $\PG(n,q).$ 
In this section, we will look at how we can work with set set of points of $PG(n,q).$ 
The idea is that we try to avoid forming the set of points, since this might be a very large set. 
Instead, we want to access points whenever we need them. Accessing points means writing down homogeneous coordinates.
So, for instance, if we know that 
there are $N$ points in $\PG(n,q),$ then we would like to have access to these points 
through the integers $0$, $1,$ $\ldots,$ $N-1$. 
Also, if we are given a point by means of homogeneous coordinates, we would like to 
identify the number from $0$ to $N-1$ that represents the point. 
The bijection between the set $0,\ldots,N-1$ and the vectors of homogeneous coordinates 
of points in $\PG(n,q)$ is an example of a {\bf rank function}. A rank funktion always comes together with 
its inverse function, which is known as an {\em unrank function}. 
So, given an integer, the unrank function creates the homogeneous coordinates of the assocated point. 
Conversely, given homogeneous coordinates for a point, the rank function computes the associated integer. 
The functions to rank and unrank  points in projective space are called 
\verb'rank_point_in_PG' and \verb'unrank_point_in_PG'. 
These functions  are member functions of the class \verb'finite_field'.
Here is  a code example illustrating the ranking and unranking of projective points. 
We start by creating the finite field $\bbF_q.$ 
Then we compute $N$, the number of points in $\PG(n,q).$
We then loop over all integers $i$ from $0$ to $N-1$. For a given integer $i$, 
we unrank the homogeneous coordinates of the $i$-th point. 
We immediately rank the homogeoneous coordinates again to see if we get the same integer $i$:


{\tt
\input CODE/projective_space.tex
}

Here is the output of the program:


{\tt
\input CODE/projective_space_out.tex
}

The class \verb'projective_space' provides 
a lot more functionality for projective spaces.
For instance, we can access the lines in projective space.
There are two ways to do so. 
For small spaces, it is convenient to precompute all lines and store the information in the form of tables. 
A line is stored as the set of points incident with it. 
This class provides access to points and lines, for instance. 
Each set contains the ranks of the $q+1$ points that make up the particular line.
The following program 
allocates and initializes a  \verb'projective_space' object 
and uses it to list the lines in $\PG(2,4).$ 

{\tt
\input CODE/projective_space2.tex
}

Here is the output of the program:


{\tt
\input CODE/projective_space2_out.tex
}


\bigskip

A second way to access lines is by means of generator matrices. 
In fact, this method is available for all subspaces of a fixed dimension. 
The subspaces of dimension $k$ in $\bbF_q^n$ are in bijection to the set 
$0, \ldots, \left[{n \atop k}\right]_q - 1$ can be ranked and unranked. 
The class \verb'grassmann' provides this functionality.
The class \verb'projective_space' contains one \verb'grassmann' object to rank and unrank lines.


