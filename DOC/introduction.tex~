\section{Introduction}

Combinatorial objects are orbits under finite group actions. 
Combinatorial problems often require us to find the number of orbits 
either by counting arguments or by construction of orbit representatives.
This is often very tedious and computers can be of great help. 
Orbiter is a software package devoted to solving these kinds of combinatorial problems. 
Orbiter is designed as 
a package of C++ classes which provide tools for studying 
many different kinds of combinatorial objects such as 
\begin{enumerate}
\item
Graphs,
\item
Codes,
\item
Designs,
\item
Finite fields,
\item
Vector spaces and subspaces over a finite field,
\item 
Finite geometries including spreads, translation planes, and polar spaces,
\item
Permutations, partitions, subsets etc,
\item 
Partially ordered sets and lattices.
\end{enumerate}


\bigskip

The basic design principle behind orbiter is to 
model combinatorial objects as equivalence classes of functions under group actions 
in the domain and in the range. 
We call these equivalence classes {\em symmetry classes of mappings.}
In the most general case, the functions are between finite sets.
We can also consider linear functions between finite dimensional vector spaces over finite fields.
In  Section~\ref{sec:modeling}, 
we will describe the theory by which combinatorial objects can be modeled 
as symmetry classes of mappings.
After that, we look at some algorithms to 
classify combinatorial objects using these models. 
Orbiter provides efficient implementations of these algorithms.
Classification programs for several types of combinatorial objects 
are provided with Orbiter.
Additional classification programs can be implemented using the library. 
Orbiter is an open system, which means that additional C++ 
classes can be added.



\bigskip



